// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`development Adding styles plugin to configuration 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development Adding styles plugin with css options to configuration 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
            "options": Object {
              "url": true,
            },
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development Adding styles plugin with fontsOutputLocation to configuration 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "../assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development Adding styles plugin with options to configuration 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "../plugins",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development Adding styles plugin with post css options to configuration 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
              "url": true,
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development Adding styles plugin with post sass options to configuration 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
            "options": Object {
              "implementation": Object {
                "info": "dart-sass	1.23.7	(Sass Compiler)	[Dart]
dart2js	2.6.1	(Dart Compiler)	[Dart]",
                "render": [Function],
                "renderSync": [Function],
                "run_": [Function],
                "types": Object {
                  "Boolean": [Function],
                  "Color": [Function],
                  "Error": [Function],
                  "List": [Function],
                  "Map": [Function],
                  "Null": [Function],
                  "Number": [Function],
                  "String": [Function],
                },
              },
              "includePaths": Array [
                "absolute/path/a",
                "absolute/path/b",
              ],
              "sassOptions": Object {
                "fiber": true,
              },
            },
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development Adding styles plugin with resolve and extensions exists to configuration 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development Adding styles plugin with style options to configuration 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
            "options": Object {
              "hmr": false,
            },
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development Adding styles plugin with url options as object to configuration 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "ident": undefined,
            "loader": "url-loader",
            "options": Object {
              "limit": 8192,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
            "query": undefined,
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development Adding styles plugin with url options as string to configuration 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "ident": undefined,
            "loader": "url-loader",
            "options": "?limit=8192",
            "query": undefined,
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development PostCss config do not exist and warn user 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development PostCss config with a plugin array 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
                [Function],
              ],
              "sourceMap": "inline",
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development PostCss config with a plugin function 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": [Function],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development PostCss config with a query string options 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
              "sourceMap": "inline",
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`development PostCss config with an object options 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
              "sourceMap": "inline",
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`production Adding styles plugin to configuration in production mode 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "production",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          "",
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "optimization": Object {
    "minimizer": Array [
      OptimizeCssAssetsWebpackPlugin {
        "apply": [MockFunction],
        "buildPluginDescriptor": [MockFunction],
        "createAsset": [MockFunction],
        "deleteAssets": [MockFunction],
        "getAssetsAndProcessors": [MockFunction],
        "print": [MockFunction],
        "process": [MockFunction],
        "processCss": [MockFunction],
        "resetInternalState": [MockFunction],
        "setAsset": [MockFunction],
      },
    ],
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "plugins": Array [
    MiniCssExtractPlugin {
      "options": Object {
        "chunkFilename": "[name].[contenthash].css",
        "filename": "[name].[chunkhash].css",
        "ignoreOrder": false,
        "moduleFilename": [Function],
      },
    },
  ],
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`production Adding styles plugin to configuration with mini css options 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "production",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          "",
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "optimization": Object {
    "minimizer": Array [
      OptimizeCssAssetsWebpackPlugin {
        "apply": [MockFunction],
        "buildPluginDescriptor": [MockFunction],
        "createAsset": [MockFunction],
        "deleteAssets": [MockFunction],
        "getAssetsAndProcessors": [MockFunction],
        "print": [MockFunction],
        "process": [MockFunction],
        "processCss": [MockFunction],
        "resetInternalState": [MockFunction],
        "setAsset": [MockFunction],
      },
    ],
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "plugins": Array [
    MiniCssExtractPlugin {
      "options": Object {
        "chunkFilename": "[name].[contenthash].css",
        "filename": "[name].[chunkhash].css",
        "ignoreOrder": false,
        "moduleFilename": [Function],
      },
    },
  ],
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;

exports[`production Adding styles plugin to configuration with optimization exist in production mode 1`] = `
Object {
  "entry": "./src/index.ts",
  "mode": "production",
  "module": Object {
    "rules": Array [
      Object {
        "test": /\\\\\\.\\(sa\\|sc\\|c\\)ss\\$/,
        "use": Array [
          Object {
            "loader": "style-loader",
          },
          "",
          Object {
            "loader": "css-loader",
          },
          Object {
            "loader": "postcss-loader",
            "options": Object {
              "plugins": Array [
                [Function],
              ],
            },
          },
          Object {
            "loader": "sass-loader",
          },
        ],
      },
      Object {
        "test": /\\\\\\.\\(woff\\|woff2\\|eot\\|ttf\\|otf\\)\\$/,
        "use": Array [
          Object {
            "loader": "url-loader",
            "options": Object {
              "limit": 10000,
              "name": "./assets/fonts/[name].[ext]",
              "publicPath": "./",
            },
          },
        ],
      },
    ],
  },
  "node": Object {
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
  },
  "optimization": Object {
    "minimizer": Array [
      OptimizeCssAssetsWebpackPlugin {
        "apply": [MockFunction],
        "buildPluginDescriptor": [MockFunction],
        "createAsset": [MockFunction],
        "deleteAssets": [MockFunction],
        "getAssetsAndProcessors": [MockFunction],
        "print": [MockFunction],
        "process": [MockFunction],
        "processCss": [MockFunction],
        "resetInternalState": [MockFunction],
        "setAsset": [MockFunction],
      },
    ],
  },
  "output": Object {
    "chunkFilename": "[name].bundle.js",
    "filename": "[name].bundle.js",
    "path": "./src/__tests__///./test-project//dist",
    "publicPath": "./",
  },
  "plugins": Array [
    MiniCssExtractPlugin {
      "options": Object {
        "chunkFilename": "[name].[contenthash].css",
        "filename": "[name].[chunkhash].css",
        "ignoreOrder": false,
        "moduleFilename": [Function],
      },
    },
  ],
  "resolve": Object {
    "extensions": Array [
      ".css",
      ".scss",
    ],
  },
}
`;
